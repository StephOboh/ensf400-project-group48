properties([
    pipelineTriggers([
        githubTriggers([
            [
                $class: 'GitHubPRTrigger',
                events: [
                    [$class: 'GitHubPRTriggerEvent', action: 'Opened'],
                    [$class: 'GitHubPRTriggerEvent', action: 'Synchronize']
                ],
                branchRestriction: [
                    $class: 'TargetBranchRestriction',
                    include: 'Stephenie2,main' 
                ]
            ]
        ])
    ])
])

pipeline {
  agent {
    docker {
      image 'gradle:7.6.4-jdk11'
      args '-v /var/run/docker.sock:/var/run/docker.sock --entrypoint=""'
      reuseNode true
    }
  }

  environment {
    HTTP_PROXY = 'http://127.0.0.1:9888'
    GRADLE_OPTS = '-Dorg.gradle.daemon=false'
    SONAR_TOKEN = credentials('sonar-token')
  }

  stages {
    // Fix permissions and verify environment
    stage('Setup') {
      steps {
        sh 'chmod +x gradlew'
        sh './gradlew --version'
        sh 'java -version'
      }
    }

    stage('Build') {
      steps {
        sh './gradlew clean assemble'
      }
    }

    stage('Unit Tests') {
      steps {
        sh './gradlew test'
      }
      post {
        always {
          junit 'build/test-results/test/*.xml'
        }
      }
    }

    stage('Database Tests') {
      steps {
        sh './gradlew integrate'
      }
      post {
        always {
          junit 'build/test-results/integrate/*.xml'
        }
      }
    }

    stage('BDD Tests') {
      steps {
        sh './gradlew generateCucumberReports jacocoTestReport'
      }
      post {
        always {
          junit 'build/test-results/bdd/*.xml'
        }
      }
    }

    stage('Static Analysis') {
      steps {
        sh './gradlew sonarqube -Dsonar.login=$SONAR_TOKEN' 
        sleep 5
        sh './gradlew checkQualityGate'
      }
    }

    stage('Deploy to Test') {
      steps {
        script {
          if (isUnix()) {
            sh './gradlew deployToTest'
          } else {
            bat './gradlew deployToTestWindowsLocal'
          }
        }
        sh 'PIPENV_IGNORE_VIRTUALENVS=1 pipenv install'
        sh './gradlew waitForHeartBeat'
        sh 'curl http://zap/JSON/core/action/newSession -s --proxy localhost:9888'
      }
    }

    stage('API Tests') {
      steps {
        sh './gradlew runApiTests'
      }
      post {
        always {
          junit 'build/test-results/api_tests/*.xml'
        }
      }
    }

    stage('UI BDD Tests') {
      steps {
        sh './gradlew runBehaveTests generateCucumberReport'
      }
      post {
        always {
          junit 'build/test-results/bdd_ui/*.xml'
        }
      }
    }

    stage('UI Tests') {
      steps {
        dir('src/ui_tests/java') {
          sh './gradlew clean test'
        }
      }
      post {
        always {
          junit 'src/ui_tests/java/build/test-results/test/*.xml'
        }
      }
    }

    stage('Security: Dependency Analysis') {
      steps {
        sh './gradlew dependencyCheckAnalyze'
      }
    }

    stage('Performance Tests') {
      steps {
        sh './gradlew runPerfTests'
      }
    }

    stage('Mutation Tests') {
      steps {
        sh './gradlew pitest'
      }
    }

    stage('Build Documentation') {
      steps {
        sh './gradlew javadoc'
      }
    }

    stage('Collect Zap Security Report') {
      steps {
        sh 'mkdir -p build/reports/zap'
        sh 'curl http://zap/OTHER/core/other/htmlreport --proxy localhost:9888 > build/reports/zap/zap_report.html'
      }
    }

    stage('Deploy to Prod') {
      steps {
        sh 'echo "Production deployment would happen here"'
      }
    }
  }

  post {
    always {
      archiveArtifacts artifacts: 'build/libs/*.war', fingerprint: true
      cleanWs()
    }
    success {
      echo 'Pipeline completed successfully'
    }
    failure {
      echo 'Pipeline failed'
      // Remove slackSend if you haven't installed the Slack plugin
      // slackSend color: 'danger', message: "Build Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}"
    }
  }
}















